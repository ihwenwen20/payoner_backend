Di bawah ini adalah beberapa langkah yang dapat Anda lakukan untuk mengimplementasikan infinite scrolling:

Perbarui Fungsi Pengambilan Data:
Anda perlu memperbarui fungsi getAllCompanies untuk menerima parameter tambahan seperti last_id. Ini akan memungkinkan Anda untuk mengambil data setelah item terakhir pada setiap permintaan berikutnya.

const getAllCompanies = async (req, last_id = null) => {
    // ...
    let query = {
        $or: [
            { name: { $regex: search, $options: 'i' } },
            { email: { $regex: search, $options: 'i' } }
        ]
    };

    if (last_id) {
        query._id = { $lt: last_id };
    }

    const result = await Users.find(query)
    // ...
};
Modifikasi Fungsi Index:
Di dalam controller, Anda harus memperbarui bagian di mana Anda memanggil getAllCompanies untuk mengambil data lebih lanjut. Anda akan mengirimkan ID item terakhir dari data sebelumnya ke getAllCompanies untuk mengambil data setelahnya.

const index = async (req, res, next) => {
    try {
        const last_id = req.query.last_id; // Ambil dari permintaan pengguna
        const { data, pagination } = await getAllCompanies(req, last_id);
        res.status(StatusCodes.OK).json({ data, pagination });
    } catch (err) {
        next(err);
    }
};
Klien Side (Frontend):
Di sisi klien (halaman web), Anda perlu mengimplementasikan logika yang memicu permintaan berikutnya saat pengguna menggulir ke bawah.

Misalnya, dalam JavaScript di halaman web Anda:

let last_id = null;

window.addEventListener('scroll', async () => {
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
        // User has scrolled to the bottom
        const response = await fetch(`/your-api-endpoint?last_id=${last_id}`);
        const { data, pagination } = await response.json();

        if (data.length > 0) {
            last_id = data[data.length - 1]._id;
            // Append new data to your UI
        }
    }
});
Di sini, ketika pengguna menggulir ke bawah dan mencapai bagian bawah halaman, permintaan akan dikirimkan ke server dengan parameter last_id. Server kemudian akan memberikan data lebih lanjut setelah item dengan ID tersebut.

Pastikan untuk mengatur parameter dan nama endpoint sesuai dengan struktur API Anda. Juga, perhatikan bahwa kode di atas hanya sebagai ilustrasi konsep dan mungkin perlu disesuaikan dengan kebutuhan dan kerangka kerja Anda.


####!SECTION
Sayangnya, jika Anda ingin menggunakan baik sistem paginasi maupun infinite scrolling secara bersamaan dalam satu endpoint, Anda harus merancangnya secara khusus, dan strukturnya bisa jadi lebih kompleks.

Namun, Anda bisa merancang logika di endpoint Anda untuk mengakomodasi keduanya. Misalnya, Anda bisa menggunakan parameter query untuk menentukan apakah Anda ingin melakukan sistem paginasi atau infinite scrolling. Berikut adalah contoh rancangan sederhana yang bisa Anda pertimbangkan:

Menggunakan Query Parameter:
Di dalam fungsi getAllCompanies, Anda dapat menambahkan parameter query seperti paginationType yang menunjukkan apakah Anda ingin menggunakan sistem paginasi atau infinite scrolling.

const getAllCompanies = async (req) => {
    const paginationType = req.query.paginationType || 'pagination';

    if (paginationType === 'pagination') {
        // Implement pagination logic
    } else if (paginationType === 'infinite') {
        // Implement infinite scrolling logic
    }
    // ...
};
Pada Sisi Klien:
Di sisi klien, Anda perlu menentukan parameter query paginationType saat membuat permintaan ke endpoint yang sesuai.

// Untuk pagination
const response = await fetch(`/your-api-endpoint?paginationType=pagination&page=${currentPage}&limit=${itemsPerPage}`);

// Untuk infinite scrolling
const response = await fetch(`/your-api-endpoint?paginationType=infinite&last_id=${last_id}`);
Implementasi Logika:
Anda perlu mengimplementasikan logika terpisah untuk sistem paginasi dan infinite scrolling di dalam fungsi getAllCompanies berdasarkan nilai parameter paginationType.

Pastikan Anda menyesuaikan parameter dan logika ini dengan kebutuhan aplikasi Anda.

Namun, perlu diingat bahwa menggabungkan kedua metode dalam satu endpoint bisa membuat logika lebih kompleks dan sulit untuk dikelola. Jika memungkinkan, lebih baik menggunakan pendekatan yang paling sesuai untuk kasus penggunaan tertentu atau memisahkan endpoint untuk sistem paginasi dan infinite scrolling.




####!SECTION
Tentu saja, Anda bisa membuat fungsi-fungsi untuk pagination dan infinite scrolling secara terpisah dalam utilitas (utils) agar dapat digunakan kembali untuk model lain. Ini akan membantu Anda mengelola kode dengan lebih efisien.

Berikut adalah contoh bagaimana Anda bisa melakukannya:

Buat File Utils:
Buat file utilitas (misalnya paginationUtils.js) untuk mengelola logika pagination dan infinite scrolling.

// paginationUtils.js

const paginateData = async (model, query, page, limit) => {
    const offset = limit * page;

    const totalRows = await model.countDocuments(query);
    const totalPage = Math.ceil(totalRows / limit);

    const result = await model.find(query)
        .skip(offset)
        .limit(limit)
        .sort({ _id: -1 });

    return {
        data: result,
        pagination: {
            page,
            limit,
            totalRows,
            totalPage,
        },
    };
};

module.exports = {
    paginateData,
};
Gunakan di Controller:
Di dalam controller, Anda dapat mengimpor fungsi dari utilitas dan menggunakannya untuk mengambil data dengan sistem paginasi atau infinite scrolling.

const { paginateData } = require('./paginationUtils');

const index = async (req, res, next) => {
    try {
        const page = parseInt(req.query.page) || 0;
        const limit = parseInt(req.query.limit) || 10;
        const search = req.query.search_query || "";
        const query = {
            $or: [
                { name: { $regex: search, $options: 'i' } },
                { email: { $regex: search, $options: 'i' } }
            ]
        };

        const result = await paginateData(Users, query, page, limit);
        res.status(StatusCodes.OK).json(result);
    } catch (err) {
        next(err);
    }
};
Parameter untuk Infinite Scrolling:
Jika Anda ingin menggunakan infinite scrolling, Anda hanya perlu menambahkan parameter last_id dalam pemanggilan fungsi paginateData di controller.

const last_id = req.query.last_id; // Ambil dari permintaan pengguna
const result = await paginateData(Users, query, page, limit, last_id);
Dengan cara ini, Anda dapat menggunakan utilitas paginateData di berbagai model dan controller untuk mengelola pagination dan infinite scrolling tanpa perlu menulis ulang kode yang sama berulang-ulang.




